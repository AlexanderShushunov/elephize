import { CommonjsModule } from './commonjsModule';
import { ModuleRegistry } from './moduleRegistry';
import { IEnumModule, LogObj, NsMap } from '../../types';

export class EnumModule extends CommonjsModule implements IEnumModule {
  public readonly isDerived: boolean = true;

  public constructor(
    className: string,
    sourceFileName: string,
    targetFileName: string,
    _namespaces: NsMap,
    serverFilesRoot: string,
    builtinsPath: string,
    log: LogObj,
    originalIdentName?: string,
    ancestorModule?: CommonjsModule
  ) {
    super(className + 'Enum', sourceFileName, targetFileName, _namespaces, serverFilesRoot, builtinsPath, log, originalIdentName, ancestorModule);
  }

  // For removing dupes during second pass of codegen
  public clearStatements() {
    this._constructorStatements = [];
    this._hoistedContent = new Set();
    this._specialVars = {};
  }

  public registerSpecialVar() { /* Makes no sense: override, do nothing */ }
  public checkSpecialVarIdentifier(): boolean {
    /* Makes no sense: override, do nothing */
    return false;
  }

  public addMethod() {
    /* Makes no sense: override, do nothing */
  }

  public addProperty() {
    /* Makes no sense: override, do nothing */
  }

  public addStaticConst(identifier: string, value: string, inferredType: string) {
    const doc = `/**
     * @var ${inferredType} ${identifier}
     */`;
    this._hoistedContent.add(`${doc ? doc + '\n' : ''}const ${identifier} = ${value};`);
  }

  public generateContent() {
    const fullyQualifiedNamespace = ModuleRegistry.pathToNamespace(this.targetFileName);

    return `<?php
/* NOTICE: autogenerated file; Do not edit by hand */
namespace ${fullyQualifiedNamespace};
use ${this._namespaces.builtins}\\CJSModule;

class ${this.className} extends CJSModule {
  ${Array.from(this._hoistedContent.values()).join('\n')}

  private function __construct() {}
}
`;
  }
}
